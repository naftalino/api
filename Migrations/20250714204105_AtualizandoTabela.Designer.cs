// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gacha.Database;

#nullable disable

namespace pd.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250714204105_AtualizandoTabela")]
    partial class AtualizandoTabela
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("gacha.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Credits")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PeopleOwned")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SerieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThumbUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TimesPulled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("gacha.Models.Collection", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "CardId");

                    b.HasIndex("CardId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("gacha.Models.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SubGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThumbUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("SubGenreId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("gacha.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Banned")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Coins")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDonator")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Linktr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Spins")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TradesMade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("pd.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("pd.Models.Subgenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Subgenres");
                });

            modelBuilder.Entity("gacha.Models.Card", b =>
                {
                    b.HasOne("gacha.Models.Serie", "Serie")
                        .WithMany("Card")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("gacha.Models.Collection", b =>
                {
                    b.HasOne("gacha.Models.Card", "Card")
                        .WithMany("Collection")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gacha.Models.User", "User")
                        .WithMany("Collection")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gacha.Models.Serie", b =>
                {
                    b.HasOne("pd.Models.Genre", "Genre")
                        .WithMany("Series")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("pd.Models.Subgenre", "SubGenre")
                        .WithMany("Series")
                        .HasForeignKey("SubGenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Genre");

                    b.Navigation("SubGenre");
                });

            modelBuilder.Entity("pd.Models.Subgenre", b =>
                {
                    b.HasOne("pd.Models.Genre", "Genre")
                        .WithMany("Subgenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("gacha.Models.Card", b =>
                {
                    b.Navigation("Collection");
                });

            modelBuilder.Entity("gacha.Models.Serie", b =>
                {
                    b.Navigation("Card");
                });

            modelBuilder.Entity("gacha.Models.User", b =>
                {
                    b.Navigation("Collection");
                });

            modelBuilder.Entity("pd.Models.Genre", b =>
                {
                    b.Navigation("Series");

                    b.Navigation("Subgenres");
                });

            modelBuilder.Entity("pd.Models.Subgenre", b =>
                {
                    b.Navigation("Series");
                });
#pragma warning restore 612, 618
        }
    }
}
